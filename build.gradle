buildscript {

    repositories {
        maven {
            url "http://dl.bintray.com/gesellix/gradle-plugins"
        }
        mavenCentral()
        mavenLocal()
        jcenter()
    }

    dependencies {
        classpath "com.bmuschko:gradle-docker-plugin:2.4.1"
        classpath "de.gesellix:gradle-debian-plugin:16"
    }

}

plugins {
    id 'idea'
    id "org.sonarqube" version "1.2"
    id 'net.researchgate.release' version '2.3.5'
}

subprojects {

    group = "com.containersol.minimesos"
    version = rootProject.version.toString()

    repositories {
        mavenCentral()
        mavenLocal()
    }

    apply plugin: 'java'
    apply plugin: 'com.bmuschko.docker-remote-api'
    apply plugin: 'maven'
    apply plugin: 'jacoco'

    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'

    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }

    task showDeps(type: DependencyReportTask) {}

    test {
        testLogging {
            showStandardStreams = true
        }
    }

    jacocoTestReport {
        reports {
            xml.enabled true
            csv.enabled false
        }
    }

}

ext {
    mesosVer = "0.25.0"
    imagePrefix = 'containersol'
}

idea {
    project {
        languageLevel = '1.8'
        vcs = 'Git'
    }
}

sonarqube {
    properties {
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.jacoco.reportPath", "${buildDir}/jacoco/test.exec"
    }
}

task checkDockerAuthentication << {
    // command below return 1 when user is not logged in to Docker Hub
    def command = "docker info | grep \"Username:\"; rc=\$?; if [[ \$rc != 0 ]]; then exit 1; fi"
    // executing via bash, so we can make use of its interpreter of the parameters. Otherwise pipes do not work
    exec {
        commandLine "bash", "-c", command
    }
}

task setVersionInBashScript << {
    if (new File(project.rootDir, "bin/minimesos").text.contains('MINIMESOS_TAG="latest"')) {
        // set explicit version in bash script
        ant.replace(file: "bin/minimesos", token: 'MINIMESOS_TAG="latest"', value: "MINIMESOS_TAG=\"${project.version}\"")
        // commit modified files
        exec {
            workingDir "${project.rootDir}"
            commandLine "git", "commit", "-a", "-m", "[Release ${project.version}] pre-tag commit"
        }
        // push update to repository
        exec {
            workingDir "${project.rootDir}"
            commandLine "git", "push"
        }
    }
}

task resetVersionInBashScript << {
    // have to use regular expression because the project version has changed and the previous is not kept
    ant.replaceregexp(file: "bin/minimesos", match: "MINIMESOS_TAG=\".*?\"", replace: "MINIMESOS_TAG=\"latest\"")
}

task releaseMinimesosCliImage << {

    def minimesosCliImage = "containersol/minimesos-cli"

    def command = "docker tag \$(docker images ${minimesosCliImage} | grep 'latest' | awk '{print \$3}') ${minimesosCliImage}:${project.version}"
    // executing via bash, so we can make use of its interpreter of the parameters. Otherwise pipes do not work
    exec {
        commandLine "bash", "-c", command
    }

    println "Pushing ${minimesosCliImage}:${project.version} docker image to Docker Hub..."
    exec {
        commandLine "docker", "push", "${minimesosCliImage}:${project.version}"
    }

    println "Pushing ${minimesosCliImage}:latest docker image to Docker Hub..."
    exec {
        commandLine "docker", "push", "${minimesosCliImage}:latest"
    }
}

task createGitHubRelease << {
    // use GitHub API
    exec {
        commandLine "curl", "-H", "Content-Type: application/json", "-H", "Authorization: token ${githubAuthToken}", "-XPOST", "-d", "{\"tag_name\":\"${project.version}\"}", "https://api.github.com/repos/ContainerSolutions/minimesos/releases"
    }
}

task updateReleaseDocs << {
    // update online documentation
    exec {
        commandLine "curl", "-XPOST", "https://readthedocs.org/build/minimesos"
    }
    // trigger update of minimesos.org
    exec {
        commandLine "curl", "-H", "x-api-key: ${awsMinimesosOrgApiKey}", "https://kilt52ydsk.execute-api.us-east-1.amazonaws.com/prod/RunHugoGit"
    }
}

// fail the build early if user is not logged in to docker
checkUpdateNeeded.dependsOn checkDockerAuthentication
// set explicit version in minimesos bash script
preTagCommit.dependsOn setVersionInBashScript
// project.version changes after execution of updateVersion. Time to tag and to push container
updateVersion.dependsOn releaseMinimesosCliImage, createGitHubRelease
// project.version changes after execution of updateVersion
commitNewVersion.dependsOn resetVersionInBashScript, updateReleaseDocs

// working around https://github.com/researchgate/gradle-release/issues/144
release {
    buildTasks = ['releaseBuild']
}

task releaseBuild {
    dependsOn(
        'minimesos:clean',
        'minimesos:build',
        'cli:build'
    )
}

